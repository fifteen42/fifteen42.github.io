<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fat Blog</title>
    <link>https://tingfei.space/</link>
    <description>Recent content on Fat Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jul 2022 23:51:08 +0800</lastBuildDate><atom:link href="https://tingfei.space/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我为什么选择做一个 DAO 而不是一个项目？</title>
      <link>https://tingfei.space/posts/souldao/</link>
      <pubDate>Thu, 28 Jul 2022 23:51:08 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/souldao/</guid>
      <description>今年二月底，我从上一个公司离职，此时我已经做了所谓区块链研究员一年多了，泛泛的看了很多技术和项目，但总感觉自己什么都不会，想着一定要去创造一点什么东西才有意思。
但我几乎没有大型项目搭建经验，JS 也忘得差不多了。还能怎么办，只能开始从头学起：JS、React、Next、Express、Solidity&amp;hellip; 好在 JS 加上 Solidity 就能搭建大部分的 web3 产品功能了。对于想上手 Web3 产品开发的同学，这里推荐郭宇的「Web3 DApp 最佳编程实践指南」。
四月和五月没出过门一直闷头学东西，当然我在上海，想出也出不去。我原来是个重度拖延症患者，事情能拖就一定拖着，但这两个月我没办法拖延了，因为我根本就没有 DDL，我自由地选择学习的内容、方式和时间，这个时候神奇的事情发生了，我的学习效率和开发效率都达到了一个全新的水平且毫无痛苦，在一个多月的时间里我补充了开发一个 Web3 产品所需要的基础知识。同时我也摸索出了一套更适合自由职业者的工作模式，后面会单独写一篇文章分享。
除了开发之外，这期间有两篇文章引起了我极大的兴趣，一篇是 「去中心化社会：寻找 Web3 的灵魂」, 另外一篇是超哥写的「Web3与社会资本」。看完之后我就坚定的相信 SBT 这类技术会是 Web3 的下一个浪潮，目前 web3 实际上大部分项目和用户都还是在玩金融数字游戏，但如果 SBT 能将社会信用编码到 web3 网络中，整个行业将会发生翻天覆地的变化。我对 SBT 的一些理解放在这篇文章中：「SBT 的来龙去脉」。
心里逐渐有了一些想法后，刚好看到 ETH Shanghai 黑客松 是 Web3 Social 主题，然后我用了大概三周时间做了 DAOU（谐音 DAO 友）这个项目：一个基于社交预言机和 SBT 的 DAO 声誉工具，通过社交关系交叉验证的方式将 DAO 成员在 DAO 中的行为数据转化为链上可验证数据从而构建 DAO 成员在 Web3 世界的灵魂画像。
令我惊喜的是，DAOU 最后竟然在两百多个参赛项目中拿到了并列第三名，之后参加 GR14 也获得了将近 900 人次的捐赠。我也联系了曾经学校里一起创过业的的老搭档还有在 Developer DAO 里认识的朋友，试图搭建一个团队正式推进这个项目。
同时黑客松主办方 Mask 和评委项目 KNN3 都对 DAOU 提供很多支持和帮助，也帮助对接了很多的投资机构。我们聊了将近 20 家投资机构，其中既有 Web3 圈内的投资机构也有传统领域的投资机构，甚至包括腾讯云战投这样投资机构，不知道是该高兴 web3 发展的还不错，还是该感叹 Web2 实在也没啥能赚钱的了。在熊市，机构出手也非常谨慎，整体决策流程也比较慢，但即使如此，也有几家机构和我们达成了初步的投资意向。</description>
    </item>
    
    <item>
      <title>SBT 的来龙去脉</title>
      <link>https://tingfei.space/posts/sbt/</link>
      <pubDate>Mon, 20 Jun 2022 11:50:02 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/sbt/</guid>
      <description>SBT 最早由 Vitalik 在今年一月的一篇文章中提出，并在 Decentralized Society: Finding Web3&amp;rsquo;s Soul 这篇论文被详细阐述。
Soulbound 这个词可能有点怪，它来自于魔兽世界，游戏中大多数非常强大的装备都是灵魂绑定的，即一旦被拾取就不能被玩家转让以及出售。所以简单来说，Soulbound Token（SBT）可以理解为一种不可转让的 NFT。
SBT 的定义或许比较简单，但它的背后的思想却非常深刻。整个世界在逐渐地数字化，社会形态和社会结构发生了很大的变化，那么在这样一个新的社会或者说元宇宙中，如何定义个人社会身份，即构建一种数字原生的身份系统，这可能是 SBT 想解决的根本问题。
谈到 Soulbound , 不得不先谈一下 RadicalxChange 这个非盈利组织。Decentralized Society: Finding Web3&amp;rsquo;s Soul 的第一作者 E. Glen Weyl 是 RadicalxChange 的创始人（同时他也是《激进市场》的共同作者），其董事会成员包括 Vitalik。RadicalxChange 还深入研究了包括二次方投票在内的诸多话题。可以说这里是 Soulbound Token 背后思想的起源地。
RadicalxChange 认为互联网的底层架构一直以来缺失了一个身份层。这一层的功能长期以来由互联网商业巨头（Google、Meta、电子邮件提供商等）来提供，他们已经成为数十亿互联网用户实际上的身份提供者。这些商业服务所创造的身份结构形式长期以来一直与互联网的基本精神相矛盾。
DIDs(去中心化标识符)的诞生部分解决了这个问题：DIDs 允许用户使用开放的标准生成自己的 ID，并将相关身份信息存储到区块链这样的可信存储平台上而不是某个互联网巨头的服务器里。DIDs 可以去唯一标记一个信息资源，提供了一种关于身份的良好载体，但 DIDs 依然严重依赖现有的中心化机构去颁发各种身份凭证。
重要的不仅是身份的载体，如何定义我们的身份同样非常重要，简单地增加一些身份凭证颁发者数量的意义并不大。我们需要从社会关系网络中创造新的信任路径，进而形成更去中心化的身份凭证基础设施，并逐步取代原有的数字权利中心（机构，学校，银行等）去定义我们的身份。多元身份（Plural Identity）提供了一种解决方案。
多元身份（Plural Identity）简单来说就是尽可能多的扩大凭证颁发者的数量。我觉得多元身份系统是一种更自然的身份系统，毕竟就算没有身份证和大学毕业证书以及其他的各种机构的证书，我们也拥有一个社会身份，社会身份的确定是由人与人之间关系和信任构成的，而这个过程本身就是多元的。多元身份更好的体现了人类身份的社会性和多维性的特点。 而 SBT 其实就是塑造多元身份的一种方式。
一个账户（地址）可以理解为一个灵魂，灵魂背后可能代表着个人、机构、组织等等，一个灵魂可以拥有多个 SBT。SBT 对应着一系列的关系、成员资格和证书等等。个人或者组织都可以向其他灵魂发行 SBT，进而形成“灵魂网络”。这种关系网络和信任网络中，我们的身份被逐渐定义。正如社会网络理论的创始人乔治·西梅尔所说：个人身份从社会群体的交集中出现，正如社会群体从个人的交集中出现一样。
关于 SBT 的应用场景，论文中讲的非常详尽清晰了，这里仅仅简单列举几个：
 声誉提供：比如现在艺术家可以直接通过他持有的 SBT 来证明他的真实性和声誉程度，而不再依赖推特等 web2 平台 web3 原生信用贷款：区块链是创造信任的机器，但是区块链世界或者说 web3 并没有一个信任网络，比如 Defi 至今没有出现原生的信用贷款。以 SBT 为根基可以创造出一个抗审查的、自下而上的“社会”信贷系统，从而减少对集中的、不透明的信用评分基础设施的依赖。 SBT 社区恢复：SBTs 本身就可以代表一定的社会关系和社会信任，所以就不必费劲选定和维护账号监护人了，直接使用灵魂社区来代替即可。 灵魂空投：针对特定的 SBT 来精确吸引灵魂。 灵魂治理：使用 SBT 部分代替金融资本进行投票，以避免富豪统治；二次方投票中，通过计算两个灵魂的相关性，来赋予相应的投票权重  关于 SBT 以及 Desoc 的实践现在处于非常早期的阶段，尚未有成熟的标准，但也已经涌现了一些相关实现。关于 SBT 的实现，社区正在不断的讨论，比如 SBT 一定要放到链上吗?</description>
    </item>
    
    <item>
      <title>1024 件独一无二的格子衫</title>
      <link>https://tingfei.space/posts/plaid_shirt/</link>
      <pubDate>Sun, 22 Aug 2021 21:02:40 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/plaid_shirt/</guid>
      <description>格子衫应该可以算是程序员的刻板印象之一。
第一次听到程序员爱穿格子衫这个刻板印象时，觉得有点无奈又有点可笑，然后看了看衣柜，发现真的有几件格子衫。 _(:з」∠)_
然后我就陷入了玄学思考，莫非程序员和格子衫真有着某种不解之缘？
和菜头在《程序员，在麻瓜的世界里挣扎》里面写过：
 世界迟早由比特构成，程序员就是这个世界的建筑师。所以，当我看到人们担忧机器人作乱，却从来不担心程序员造反的时候，我都觉得人类奇妙极了。如果真有机器人统治世界的一天到来，在那一天之前，程序员应该早已经统治了世界许久。
 我在想如果程序员是未来世界的魔法师的话，那怎么也得来件法袍吧？
我觉得格子衫就挺好，充满着规律但是又变化万千，就跟0、1的比特流一样。
大概两三年前我有过一个想法，弄一个网站，随机生成格子衫条纹，然后可以一键工厂代工，这样就可以有无穷无尽的格子衫可以穿啦哈哈哈。
但是这样的格子衫和其他格子衫也没啥不同，难以承载法袍这么牛🐂的东西。
格子衫必须注入灵魂，要能显示出魔法师的尊贵。我一下子想到最近很火的 cryptopunks。
NFT 或许是一种很好地注入灵魂的方式：基于区块链技术保证独一无二，能够明确所属权并实现永久保存。NFT 其实可以作为一个容器，能够将大家的共情容纳其中，或者说可以存储社交网络的价值。
或许元宇宙中会出现 1024 件独一无二的格子衫，而在那个世界格子衫不再土鳖，而是魔法师地位的象征😏。
 后记（2021-08-26 10:26:43）： 经过思考，我认为格子衫不足以引起大家的广泛共情，虽然是一个梗，但没那么好理解，并且格子衫确实没那么酷 要起这样的 IP 可能没啥意思。而且现在要经营这样的 IP，其实运营是重头戏，所以暂时放弃，不过作为一个思考实验挺好的。</description>
    </item>
    
    <item>
      <title>区块链如何影响开源?</title>
      <link>https://tingfei.space/posts/open-source-tokenomics/</link>
      <pubDate>Sun, 11 Jul 2021 17:19:52 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/open-source-tokenomics/</guid>
      <description>原文 How blockchain will influence open source 由作者 Bilgin Ibryam 首发于 opensource.com 。 本文遵循原文的 CC BY-SA 4.0 许可证对开源之道的文章进行了一些修改和补充。
 区块链技术能够连接开源软件和用户，这将会给予开源新的力量。
中本聪10年前创造的比特币如今已有大量的追随者。对于一些人来说，区块链技术会像互联网一样深刻地影响人类社会。而对于另外一些人，对区块链技术的炒作只是一个庞氏骗局罢了。区块链也一直在进化并不断地去尝试找到自己的定位，但有一件事情是确定的: 区块链将从根本上改变某些行业，而我坚信开源就是其中的一个。
开源的模式 开源是一种软件协作开发以及软件分发的模式，开源允许拥有共同兴趣的人们一起协作，进而生产出他们中间任何个体都无法独立完成的事情，它让整体所创建的价值远远大于部分的总和。开源使用分布式的协作工具（IRC、email、git、wiki、issue跟踪等）并在开源许可证的模式下被分发和保护，当然还有诸如Apache 软件基金会和云原生基金会这样的非盈利基金会的治理。
开源软件的一个很有趣的点是它本质上是缺乏金钱上激励的。一些人认为开源工作是一种由内在动机驱动的自由且无偿的活动（比如“共同理想”、“让世界变得更好”）而不该谈钱。另一些人认为开源工作也需要一些直接或间接的外部激励（比如资金上支持）。只通过自愿地贡献就能形成繁荣的开源生态，这种想法很浪漫，但大多数的开源贡献都是在有偿的情况下完成的。的确我们有大量无偿的开源贡献者，但除了一些非常热门的项目，大多数贡献者都是临时性地来来走走。而创建和维护对企业有用的开源项目需要长时间的开发、文档、测试、bug 修复，即使当项目已经不在让人那么心潮澎湃。这其实一项很枯燥的工作，最好能有经济上的激励。
商业化的开源 众所周知，Apache软件基金会是通过捐助以及其它的一些收入：赞助费、会议费用等等。但是要知道这些资金主要是用于运营基金会本身，如为项目提供法律保护，以及确保有足够的服务器来运行程序、issue 追踪、邮件列表等等。
同样的，云原生基金会CNCF会收取会员费，以及更多的会议费用，这些费用同样是用来运营基金会以及为项目提供资源支持。如今的年头，绝大多数的软件已经不能在自己的笔记本电脑里完成所有开发了，它们运行和测试都是在云平台中上百台服务器当中。这些都属于基金会的日常开销。其它如开展营销活动，品牌设计、分发一些宣传物品，也是基金会份内的事情。基金会的核心任务是实施正确的流程，与用户，开发人员和控制机制进行交互，并确保将可用财务资源分配给开源项目以实现共同利益。
开源项目可以募捐到钱，基金会也可以公正的进行分发，看似一切都很好，那么哪里还有问题呢？
问题就是在开源软件生产者和消费者之间缺乏一条直接的、透明的、可信任的、去中心化的、自动的传输价值的双向链接。
开源生态的几个问题在于：
 价值传输是单向的：开发者花费精力绞尽脑汁为开源软件提交贡献把价值传递给开源软件的用户，但却没有一个相反的即从用户到开发者的途径。 间接：如果开源软件有个 bug 会影响到具体的某个用户或者公司，那么有下列几种选项：  让内部开发人员修复bug，然后提交一个 pull request，这是比较理想的状态，但这些公司并不总是能够聘请到特定开源项目的开发人员，因为一般公司都会使用成百上千个开源项目。 聘请专门从事该特定开源项目的自由职业者并支付服务费用。理想情况下，自由职业者也是开源项目的提交者，可以直接快速更改项目代码。否则，修复程序可能永远不会合并到项目中。 向围绕开源项目提供服务的公司寻求帮助。这些公司通常雇用开源提交者来提高影响力和获得社区的可信度，并提供产品或咨询服务。    第三种选择是维持许多开源项目的成功模式。无论这些公司提供服务（培训、咨询、workshop）、技术支持、打包、开放核心，还是SaaS服务，不可否认的是他们都需要雇佣上百个全职的员工来为开源做出努力，我们可以看到这样的公司有一大把，他们成功的建立了有效的开源商业模式，而且正在有更多的公司加入这个阵营。
支持开源项目的公司在这个生态系统中发挥着重要的作用：它们介于开源项目和用户之间，起着重要的催化剂作用。那些能够真正为用户创造价值的公司，不仅仅是能够打包出很棒的软件;而是他们能够识别用户的真实需求，且能够洞察技术趋势，有能力创建出一个完整的堆栈甚至是开源项目的生态系统来满足这些需求。 他们可以全身心的扑在一个有些寂寥和无聊的项目上，而且会一直支持很多年，只为坚守其中的价值。还有如果在某个软件堆栈中缺少了某一部分，他们随时可以从头开始一个开源项目，并围绕它来构建一个社区。他们甚至可以收购一家闭源的公司，然后将项目再整个的开源了（没错，可能很多读者看到这里已经猜到了说的是哪家公司了，没错，这里的特性红帽公司都拥有。）
简单总结一下，基于商业化的开源模式就是这样，项目由少数个人或公司正式或非正式的管理和控制着，这些个人或公司确保了项目的成功发布，而且有着商品化的能力，并有效的在回馈给开源的生态。对于开源开发人员，管理公司和最终用户来说，这是一个没有输家的美好格局。这可以很好的替代那些日薄西山且昂贵的闭源软件！
自我维持，去中心化的开源 毫无疑问，想要让项目赢得好口碑，就得满足一些人们的期望。举例来说，Apache 软件基金会和云原生计算基金会均需要孵化和毕业的过程，除了所有技术和形式要求之外，项目还必须拥有健康数量的活跃提交者和用户。这些都是形成可持续发展开源项目的关键。在GitHub上拥有源代码与拥有一个活跃的开源项目是有着本质上的不同。一个活跃的开源项目意指编写代码的提交者和使用代码的用户，两个组通过交换价值并形成一个每个人都受益的生态系统来不断的螺旋式成长。一些项目生态系统可能很小而且寿命很短，有些可能包含多个项目和竞争服务提供商，其中非常复杂的交互持续多年。但只要有价值交换，每个人都从中受益，项目就会得到发展、维护和可持续。
我们来看下 Apache 软件基金会的项目 Attic，该项目已经完成了它的历史使命，正在走入其生命周期中最后的阶段。这是非常正常的现象：当一个项目在技术上不再适合它的当初的开发目的时，它通常会自然结束。同样，在 ASF 的孵化基地，你会发现很多项目从未毕业但却已经退出了历史舞台，通常情况下，这些项目无法构建足够大的社区，要么因为它们过于偏门，要么是被更好的方案所替代。
但更多的情况是，具有高潜力和卓越技术的项目无法维系自身，因为它们无法形成或维持一个有效的生态系统来进行价值交换。**目前的开源模式以及基金会并没有为开发者提供一个获得报酬或让用户获知他们的请求的框架或机制，这样的话，就没有任何一方拥有共同的价值承诺。**这样的话，结果就是一些项目只能在商业的开源环境中维持自身，在商业化的开源中，公司充当中间人的角色，并在开发者和用户之间进行价值获取。这增加了另外一个局限性就是要求服务提供商的公司来维持一些开源项目。这似乎离理想中的情况很是遥远：用户可以完整而直接的表达他们对项目的期望，开发人员能够以透明、可量化的方式来兑现他们对项目的承诺，这是一个具有共同利益和价值交换意向的社区。
想象一下有这么一种模式使得开源软件贡献者和用户可以直接互相影响。不仅仅是通过Pull Request 来贡献代码、使用邮件列表发送问题、GitHub 的星星数量、以及笔记本电脑上的贴纸，而且还体现在杨素有更多的方式可以更加自控、透明地影响项目的走向。比如以下这些激励：
 直接为开源项目提供资金，而不是通过软件基金会 通过投票影响项目方向（通过代币持有人） 由用户需求驱动的功能需求 及时的合并 Pull Request 为提交缺陷者给予奖励 为更好的测试覆盖率进行奖励 奖励及时更新文档者 及时的安全修复 专家协助，支持和服务 为项目的布道师和推广者进行最佳预算 定期活动的预算 更加快速的电子邮件和在线聊天帮助系统 全面了解整体项目的状态。 等等  你可能已经猜到了，以上这些激励就是使用区块链和智能合约来促进开发者与用户之间的积极互动。智能合约可以让代币持有者拥有真实的权力来影响项目的走向。下图所示为：开源生态系统中区块链的应用。</description>
    </item>
    
    <item>
      <title>互联网计算机共识协议介绍</title>
      <link>https://tingfei.space/posts/icc-intro/</link>
      <pubDate>Mon, 05 Jul 2021 11:36:18 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/icc-intro/</guid>
      <description>互联网计算机共识协议（ICC）本质是一种优化版的 BFT 共识算法。本文对官方文章 Achieving Consensus on the Internet Computer 做了一些总结和梳理，旨在介绍互联网计算机（Internet Computer，简称 IC）的共识协议。
需要注意的是，互联网计算机由子网组成，每个子网相当于一条独立的区块链，节点只在子网内部参与共识，跨子网的信息不参与共识而是由 Chain Key 技术来提供验证。所以本文所讲的共识算法，仅指的是子网内部的共识算法。
概况 对什么达成共识？
互联网计算机（Internet Computer）是 Dfinity 基金会推出的自适应区块链，其智能合约（canister）可以承载传统 web 应用，因此也可以理解为一种去中心化的云服务平台（类比AWS、阿里云）。
互联网计算机由分布在世界各地数据中心中的节点组成：
 数据中心运维节点，提供底层硬件。 节点会被划分为各个子网，并在子网内完成共识，子网数量可以增加。 应用以 canister 为单元运行于子网中，canister 为 IC 的的智能合约。  共识的内容为：用户与 canister 之间的通信、canister 之间的通信以及这些通信的顺序。不同节点收到的信息的顺序可能不一样，但是处理信息的顺序必须相同。
共识目标
在不正常（恶意、掉线等情况）节点数小于总节点数的三分之一时，都能保证以下三个特性：
 安全性：在某个时刻如果两个节点认为他们对区块链达成了共识，那么他们实际上他们所看到的区块链就应该是同样的； 活跃性：区块会持续增长，系统会持续处理新增信息； 有效性：区块链中所有的区块和区块中的信息都是有效的，比如所有信息都被其发送者正确签名了；  共识组成部分
 区块构造：构造候选区块 公证：保证区块的有效性 随机数灯塔：对随机性达成共识以加速 敲定：确定共识达成的时间  下面以一个4节点的子网为例，按照共识的四个组成部分来描述子网是如何达成共识的。
一、区块构造 子网中的节点充当区块构造器，负责构造区块并通过向子网广播提议新区块。
在某个特定的区块高度，比如区块高度 30，区块构造器负责把所有可获得的有效信息打包到一个区块中，然后广播。
有效信息包括：用户与 canister 的通信、 canister 之间的通信以及这些通信的顺序。
二、公证 公证过程中，节点使用 BLS 门限签名(2f + 1)对区块进行公证，当三分之二的节点验证并签名一个区块时，这个区块就获得了公证。节点的私钥通过 DKG （分布式密钥生成）来产生。</description>
    </item>
    
    <item>
      <title>NNS 治理系统概念总结</title>
      <link>https://tingfei.space/posts/nns_summary/</link>
      <pubDate>Tue, 18 May 2021 15:33:50 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/nns_summary/</guid>
      <description>Understanding the Internet Computer’s Network Nervous System, Neurons, and ICP Utility Tokens 是官方对 互联网计算机（Internet Computer）的网络神经系统（Network Nervous System, 简称 NNS）的讲解，内容包括 NNS，神经元，ICP 代币经济。本文对其中的关键概念进行了梳理和总结。
 注意，原文主要描述了 NNS 治理系统的经济层面的设计细节，需要对互联网计算机、canister等概念有一定理解。
  概况 互联网计算机（Internet Computer）是 Dfinity 基金会推出的自适应区块链，其智能合约（canister）可以承载传统 web 应用，因此也可以理解为一种去中心化的云服务平台（类比AWS、阿里云）。
互联网计算机由网络神经系统（NNS）治理，NNS 相当于互联网计算机的大脑。
NNS 本身也是互联网计算机的子网之一，所以升级和调整不会打断互联网计算机的运行。
NNS 可以做到的事情有：升级节点以更新协议或修复漏洞、调整经济参数、添加新的子网以扩容、拆分子网、冻结恶意应用等等。
用户可以质押 ICP 代币生成神经元，从而参与到 NNS 中进行投票治理并获取投票奖励。
用户通过神经元向 NNS 发起提议，其他神经元针对提议投票（接受或者拒绝）。
每个提议都会有一个类型，比如 “#NodeAdmin” “#NetworkEconomics”，代表着不同类型的事务。
如果提议被接受，它将会立即自动化执行。
如果提议被拒绝，发起提议的神经元将会被收取一定费用，以避免过多的 “垃圾提议”。
神经元 用户可以锁定 ICP 代币生成神经元，参与投票治理并获取投票奖励。
神经元创建成功后，开始计算年龄。
随着投票活动的增加，神经元的成熟度将会随之增加。
当神经元的成熟度达到某一阈值，可以生成一个新的神经元作为奖励，新神经元中的代币数量为原神经元的代币数量乘以原神经元的成熟度。
用户需要溶解神经元才能取回对应代币，溶解所需的时间称为溶解延迟。
只有溶解延迟超过 6 个月的神经元才能参与投票治理以及发起提议。
可以向神经元转账以增加质押量，但年龄以及成熟度会按比例缩减。
溶解延迟由用户在创建神经元时设置，溶解延迟最多 8 年。
溶解过程中，用户可以随时停止溶解回到锁定状态，但神经元的年龄会重新从 0 开始计算。</description>
    </item>
    
    <item>
      <title>价值一个亿的人工智能算法（Rust 版）</title>
      <link>https://tingfei.space/posts/one_billion_ai_algorithm/</link>
      <pubDate>Fri, 05 Mar 2021 17:47:53 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/one_billion_ai_algorithm/</guid>
      <description>#![allow(unused)] use std::io::stdin; fn main() { loop { let mut s = String::new(); stdin().read_line(&amp;amp;mut s) .expect(&amp;#34;Failed to read line.&amp;#34;); s = s.replace(&amp;#34;吗&amp;#34;, &amp;#34;&amp;#34;); s = s.replace(&amp;#34;我&amp;#34;, &amp;#34;你&amp;#34;); s = s.replace(&amp;#34;?&amp;#34;, &amp;#34;!&amp;#34;); println!(&amp;#34;艾瑞斯：{}&amp;#34;, s); } } 使用 你好 艾瑞斯：你好 今天天气好吗 艾瑞斯：今天天气好 我是世界上最美的人吗 艾瑞斯：你是世界上最美的人 天呐,我竟然是猪 艾瑞斯：天呐,你竟然是猪 吃饭? 艾瑞斯：吃饭! 来源 https://github.com/ruanyf/weekly/issues/158
 Just for fun 🤣</description>
    </item>
    
    <item>
      <title>关于数字收藏品的一点思考</title>
      <link>https://tingfei.space/posts/digital_collections/</link>
      <pubDate>Tue, 22 Dec 2020 14:01:23 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/digital_collections/</guid>
      <description>昨天刷微博看到带有“交通互联”标志的交通卡可以在支持交通互联的任何城市使用，而不需要办理任何其他手续。我特地搜了搜，发现很多城市都已经开通了。而且各种各样的交通卡看起来都挺有意思的，遂产生了收藏的想法。随便放两张图片
有两种收藏的方式：实体的或者电子的。实体的交通卡看得见摸得着而且不用依托其他物理设备，缺点是办起来麻烦，要么二手交易，要么到所在城市去办。电子的交通卡(苹果钱包)办起来方便，收藏成本也比较低，缺点是必须依托手机以及相应 APP ，而且可能会由于 APP 的下架或者官方的更新等等原因变得不一样了，这样的话电子交通卡给人的“拥有感”就没有那么强了。 所以如果我真要二者选其一收藏的话，我应该还是会选择实体卡吧。
作为一个区块链从业者，可不能让电子交通卡这么容易就输了，我自然地想到 NFT 这种方式：将每张交通卡都映射为区块链上独一无二的资产。这样的话，电子交通卡能够保存的时间甚至可以超过实体卡，并且交易起来也甚至更方便了。
但是谁会来收藏这样的交通卡呢？ 排除投机的意图，我觉得这是需要对加密资产有一定认知程度的人才会去收藏这样的东西，就像是一幅画，也是要有鉴赏力的人可能才会去收藏，而对加密资产的收藏也是要有对应的“鉴赏力”。就比如之前我买 cryptokitties 的时候被人吐槽：&amp;ldquo;我绝不会花几千块钱，去买这样的卡通猫猫图片。&amp;rdquo;
此外，由于交通卡也是一种储值卡，天然带有资产属性，我想如果可以将交通卡的资产系统融入到区块链这个去中心化体系中去，听起来就更有意思了。或者区块链上会有一个交通互联的Dapp，又或许还会有交通卡的盲盒呢，哈哈。
在国内做到类似事情的，我看到的有 Nervos 生态的 Portal Wallet，不知道这个到处“白嫖”基础设施的项目有没有能力再“白嫖”一下交通卡😂</description>
    </item>
    
    <item>
      <title>为什么用 assert_eq 比较 string 和 &amp;str 会成功？</title>
      <link>https://tingfei.space/posts/compare_string_and_str/</link>
      <pubDate>Fri, 20 Nov 2020 15:11:30 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/compare_string_and_str/</guid>
      <description>昨天写代码的时候发现用 assert_eq 比较 string 和 &amp;amp;str 会成功，如下：
let s1 = String::from(&amp;#34;hello&amp;#34;); let s2 = &amp;#34;hello&amp;#34;; assert_eq!(s1, s2); 凭直觉来讲，这不应该能通过，因为 string 和 &amp;amp;str 是两种类型，然后我觉得是 assert_eq 这个宏做了特殊处理，于是我又试了一下
let s1 = String::from(&amp;#34;hello&amp;#34;); let s2 = &amp;#34;hello&amp;#34;; assert!(s1 == s2); 发现也没有问题，这说明和 assert_eq 没啥关系，于是我在 reddit 以及 Rust 中文社区提问，一个老哥的回答是：
 String and &amp;amp;str cannot be compared at all, so Rust will look for ways to make the comparison possible. It will find that s1.deref() returns &amp;amp;str which obviously can be compared to &amp;amp;str (because Strings implement Deref&amp;lt;Target=str&amp;gt;) so it will automatically use that.</description>
    </item>
    
    <item>
      <title>最近看的几本科幻</title>
      <link>https://tingfei.space/posts/some-sf/</link>
      <pubDate>Mon, 09 Nov 2020 17:52:52 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/some-sf/</guid>
      <description>最近几个月不知不觉养成了睡前看科幻的习惯，因为睡前感觉自己比较放空，读科幻的时候代入感就很强，仿佛自己真的进入了那些世界里一样。还有一个好处就是避免自己刷手机，睡前老是想刷手机，一刷手机的话就又睡不够了。
神农后裔 题材是很新颖的，古代传说中的人物会以怎样的科幻形式展开呢，一下子就吸引了我的眼球。但是具体看下来的话，涉及古代人物的篇幅主要是作为开篇伏笔，主干内容中除了借用了几个古姓之外似乎并没有太多与古代传说相关的东西。
另外有些场景，古代和现代的内容处理的不是很和谐就会给我一种诸葛亮开着兰博基尼的奇怪感觉。所以总体来说，这部小说还是有点不满足我的期望的，不过这本小说还没有完结，后续还是值得期待的。
云鲸记 小说内容就和名字一样美。巨大的云鲸流淌着淡金色的血液，凭借着反重力物质，游弋天际，栖于风中，眠于云间。
想到云鲸，我脑海中浮现出了一个场景：夕阳给一团一团的云镶上金色的边，而不远的天空依然是清澈的浅蓝色。如果那些云有生命的话，恐怕就是云鲸的样子吧。
人类向何处去 《人类向何处去》这是一封来自未来的信。以往读的科幻小说中往往人类的形体不会有太多变化，而在这本书里 18 代人类之间的差距差不多和猫咪与人类之前的差距一样大。这并不是小说，因为里面并没有具体的人物，但是可读性却非常的强，我像是在看一部纪录片一样，记录着人类一步步的进化，而进化的过程让人感到真实而恐怖。我感觉自己很难描述这本书，但是它的的确确和其他的科幻不一样，非常值得一读。
群星 《群星》可能是我最近读的科幻中最对我胃口的一部了，也可能因为它比较像三体吧，故事结构、关键概念的设计都感觉能看到三体的影子。其中构造体的设计我非常喜欢，感觉非常的有意思（题外话：构造体感觉很像编程语言的一个概念哈哈哈）。但就是我最喜欢的两个人物的结局我都不是很满意，感觉作者太宠溺女主了，看完了有种想写同人的冲动[捂脸]。
 最近比较关注的作者是阿缺，《神农后裔》和《云鲸记》都是阿缺写的。我关注他的原因是因为他在《星海旅人》后记中的一段话：
 在银河尺度的舞台上，距离和空间再度恢复了它们的庄严，是难以逾越的存在;曾被科技膨胀得忘乎所以的人类，重新成为虫子。
  要去往下一个星球，就要做好永远无法回到故乡的打算。错过了这间酒馆里遇到的人，在十亿星辰里，再碰上的概率就几乎不存在。道路不会有尽头，前方永远是未知。飞船把文明的种子带到陌生的星球，埋下去，又立刻赶往下一个目的地。你在深夜抬头，所有闪烁的群星，都是人类文明的荣光。
  而在这样的背景里，有一个人，搭载着不同的飞船，在每一颗星球留下足迹。他疲倦，但永远兴味盎然; 他渺小，但浩瀚的星云都是他的朋友; 他见过形形色色的人，但孤单的时候，只会掏出一张因老旧而掉帧的液晶照片。
  这是我心中浪漫的极致。
 我读到这段话时十分触动，因为我感觉自己有很长的一段时间的状态都像这段话里描述的人一样，孤单、疲倦但永远兴味盎然。感觉经历的过去就像是曾经游历过的星球，虽然可以看见它们在发光，但是回去似乎是很难很难了。</description>
    </item>
    
    <item>
      <title>想学学 web 开发？来看看这个项目：RealWorld</title>
      <link>https://tingfei.space/posts/real-world/</link>
      <pubDate>Sat, 24 Oct 2020 17:49:20 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/real-world/</guid>
      <description>最近想学习一下用 Rust 开发 web 应用，以便之后快速搭建 web 服务。程序员嘛，难免偶尔就要搭个网站什么的。
关于框架和语言的选择，我想用 Rust 做后端，React 做前端。用 Rust 作后端因为 Rust 是我目前的主力开发语言，想多用用。本来也想用 Rust 开发前端的，然后也有 Yew 这样比较优秀的 Rust 前端框架，但是想了想 React 的生态，只能说真香了。
在 GitHub 上一番搜索后发现了这个超出我预期的项目：RealWorld
简单描述一下：这个项目的目标是构建一个类似于Medium的博客网站。项目独特的地方在于，可以任意搭配不同语言的前后端，因为前后端都遵循同样的API接口设计。此外，还有一个我很喜欢的点是最终构建的项目功能比较齐全，是一个可以实际使用的产品，但是又没有太复杂。因为有很多的教程或者项目，要么是太简易，以至于当要真正开发一个产品的时候又没什么头绪，要么是太复杂，不容易上手。
我大致翻了一下，感觉大部分我听说过的语言和前后端框架上面都有。下面我放几个 star 比较多：
前端：
后端：
然后我从中选了 React/Redux作为前端以及 Rust/actix 作为后端。
跑了跑这两个项目，运行的过程都非常顺滑，特别是Rust的后端框架，项目结构很清晰，看着非常舒服。配套的东西也都很全，比如postman测试包和运行着的的后端接口。后面准备基于这两个项目改一个产品出来。
感觉这个项目特别适合刚学完一门语言用来练练手。
最后，特意等了几分钟到10月24号了，祝猿/媛们节日快乐，多点头发，少点 Bug，嘿嘿。</description>
    </item>
    
    <item>
      <title>重读精通比特币</title>
      <link>https://tingfei.space/posts/mastering-bitcoin/</link>
      <pubDate>Sun, 24 Nov 2019 17:47:13 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/mastering-bitcoin/</guid>
      <description>《精通比特币》这本书说实话我就很久很久以前别人就给我推荐过，我也断断续续的看了几次了（好像每次都没有完整的读完）
但是有些概念，总是理解的模模糊糊，特别是我最近读 parity-bitcoin 源码的时候，总会时不时的有一些疑问
就比如隔离见证，虽然之前概念都算勉强知道，但是等到代码层面就有点吃力了
这块石头也该挪走了，我打算配合着 parity-bitcoin 重新精读一遍精通比特币。终极目标可能是在毕业之前能造个比特币客户端的轮子
《精通比特币》的作者 Andreas M. Antonopoulos 是在 2011 年接触到比特币的，但是和许多聪明人一样，他最开始也没有理解这玩意儿，而是隔了几个月再次接触比特币之后才正经开始学，然后一发不可收拾
在2014年《精通比特币》出版之后，这本书逐渐成为了学习区块链的入门首选，算是宝典级的区块链书籍了。值得一提的是，O’Reilly 这套书本来是叫做动物书，但是这本（切叶蚁）和之后出版的《精通以太坊》（蜜蜂）都是以昆虫为封面的
作者在前言里也讲了封面故事，我觉得挺有意思的：
 在群居生物物种中，切叶蚁表现出了高度复杂行为的物种特征。但是，群落中的每一只蚂蚁个体仅仅遵循一些社会互动和化学气味（即信息素）交换的简单规则。维基百科提到：“切叶蚁形成地球上仅次于人类的最为庞大且复杂的动物社会。”实际上，切叶蚁不吃叶子，而是使用叶子制造一种真菌来充当蚁群主要食物来源。意识到了吗？它们在耕作！
  虽然切叶蚁形成的是阶级社会，且依靠蚁后繁衍后代，但是在蚁群中不存在中央集权体制或领导人。通过切叶蚁我们可以看到，群落中数百万成员所展现的高度智能且复杂的行为是社会网络中的个体互动这一性质的凸显。
 题外话：其实我小时候就挺喜欢切叶蚁的，小时候看动物世界，关于蚂蚁我最喜欢的两个画面一个是黑猩猩用树枝弄蚂蚁吃，另一个就是切叶蚁扛着叶子整整齐齐地在森林里浩浩荡荡
区块链的各种入门资料真的是参差不齐，之前犯傻把市面上的区块链的书差不多都买来宿舍堆着，也看了好多网上的资料。但是最后除了让一堆概念冲的头昏脑涨，也感觉没学到个啥。导致我现在看到区块链科普性质的东西就会有点类似于审美疲劳的那种感觉。
所以现在的话，要是让我总结学习经验的话，就两点：
 找到最好的资料 输出式学习  就拿比特币举例
 最好的资料：比特币白皮书、精通比特币、比特币源码 输出式学习：写博客、给别人讲、造轮子  所以之后也会持续在这里写源码阅读和读书笔记的博客。日常一点的文章会放在我的公众号上面：与自己的邂逅。感兴趣可以关注哈哈哈</description>
    </item>
    
    <item>
      <title>什么是双拼输入法？</title>
      <link>https://tingfei.space/posts/shuang-pin/</link>
      <pubDate>Sat, 02 Nov 2019 17:29:15 +0800</pubDate>
      
      <guid>https://tingfei.space/posts/shuang-pin/</guid>
      <description>什么是双拼输入法？
 双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。维基百科
 也就是说只用两次击键就可以拼写任何一个汉字。想想 shuang xiang ping等等拼音，对于拼写效率的提高可想而知。
并且双拼的学习成本并不高。可能就只需要一个下午的时间来专门学习，之后就不用刻意练习，大概再过两个星期就可以熟练使用了，然后就再也回不去了_(:зゝ∠)_
我选择的是搜狗输入法，原因是基本上任何流行的操作系统都有搜狗输入法，包括学校机房的XP以及Linux，5秒之内就可以切换到双拼模式，苹果默认的双拼输入法也是搜狗双拼
缺点：
 虽然双拼减少了击键次数，但是也使得智能简拼的效率降低了，以拼写“生活”为例，用全拼拼写sh即可选择   但是用双拼(搜狗)的话，sh就表示sang,所以就不会有相应提示  重码率提高，为了做到任意两个键拼写一个字，所以好几个字母都代表了两个韵母，这就提高重码率。   针对这个问题的解决方法就是辅助码以及拆字辅助码，当然不用也是完全没有问题的，只是要多按几次翻页键
双拼练习网站 链接 参考：
 选择输入法的哲学：兼论双拼的优缺点 做少数派中的少数派：双拼输入快速入门  </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://tingfei.space/about/</link>
      <pubDate>Wed, 06 May 1998 17:33:05 +0800</pubDate>
      
      <guid>https://tingfei.space/about/</guid>
      <description>&amp;hellip;</description>
    </item>
    
    <item>
      <title>369 工作制</title>
      <link>https://tingfei.space/posts/369workingsystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tingfei.space/posts/369workingsystem/</guid>
      <description>369 是一种新型工作制，适用于：自由职业者、远程工作者、数字游民等。具体来说就是每月工作三周，每周工作六天，每天工作 9 个小时，9 个小时可以按自己的习惯任意安排。
如果你做过自由职业，那么你肯定知道并不是自由职业就是想什么时候工作就什么时候工作，一个很好的 routine 对于高效工作是必不可少的。但是传统的 8 小时工作制貌似非常不适合自由职业者（这里不讨论病态的 996 工作制）。
955 所代表的 8 小时工作制是工业革命的产物，这一制度旨在减少工人被迫在工厂内从事体力劳动的时间。这在 200 多年前是一项很重大的突破，但是在信息革命之后，这种工作制首先将会被逐渐淘汰。
8 小时工作制有有几个不太好的点，首先连续工作 8 小时，即使有个短暂的午餐和午休，下午也会感到比较疲惫。传统线下办公场景下我们不得不这样，因为通勤的时间成本很高，一天不可能通勤多次。但远程工作者完全不必按照这样来。我自己一天 9 个小时工作时间是这样安排的，早上 9 点至 12 点，下午 3 点到 6 点，晚上 9 点到 12 点。这样做的好处是，我每工作三个小时都可以休息三个小时。对于脑力工作来说，三个小时刚刚好，既能保证工作的连续性，又不至于太疲惫。疲惫是创造力的杀手。
其次 8 小时工作制将每个月 8 天假期均匀地分布在 4 周中，这样的话出趟远门（回家或者旅游），基本上就只有节假日了，而节假日又非常的拥挤。我们出行的自由其实就被这种无形的屏障大大限制了。369 工作制每个月的工作时长是 162 小时，大于八小时工作制的 160 个小时。即 369 工作制在没有减少每个月工作总时长的前提下但是每个月却都有一个八天的完整假期。
高质量的休息其实不管对于工作还是身心健康都非常重要，不重视休息其实等同于不重视工作，我觉得 369 工作制能够让我们更好地平衡两者，给我们更多自由。
369 工作制是我靠经验总结的，并没有理论支撑，仅供参加，欢迎交流~</description>
    </item>
    
    <item>
      <title>SBT 相关标准介绍【一】</title>
      <link>https://tingfei.space/posts/sbt_standards_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tingfei.space/posts/sbt_standards_1/</guid>
      <description>现在有很多 SBT 相关的标准和实现(不下十个)，这也就意味着大家对 SBT 理念有很多不同，但最终的标准只有持续的讨论和实践并经过市场的选择才能确定。本文介绍三个比较比较有意思的 SBT 相关 EIP 标准，此系列持续更新。
EIP-4973: Account-bound Tokens Account-bound Tokens (ABT) 中文名可以叫做账号绑定代币，原因好像是作者认为世界各民族对灵魂的理解是不一样的，用账户可能更准确和中立一些。EIP-4973 创建于 2022-04-01 ，早于 Desoc 论文发布。目前 Otterspace 和 violet 在使用这个标准。处于 Review 阶段 (EIP 的创建流程大致可以视为四个阶段：Draft -&amp;gt; Review -&amp;gt; Last Call -&amp;gt; Final)。代币标准的总结如下：
 必须不实现 ERC721 的 transfer 相关的接口 代币持有人随时都可以将ABT 与自己的地址接触绑定：unequip 函数 可主动发送给接收方，也可以由接收方自主 mint : give 和 take 函数 支持 ERC721Metadata 所以钱包和交易平台可以复用 NFT 的基础设施，轻易的展示 ABT 接口数量很少关键的函数只有刚刚提到的这三个，保持最大的向后兼容性  EIP-4973 作者自己根据标准实现了一版合约
EIP-5114: Soulbound Badge EIP-5114 的一个很不同的点是，这个标准是把 SBT 绑定到 NFT 而不是绑定到地址上。也引起了社区成员的很多讨论，很多人觉得把 SBT 绑 NFT 的需求好像不是很明显。但也有人觉得还是挺有意思（包括我），因为这其实给 NFT 增加了一些新的玩法，比如具有成长性的 NFT。这里也就抛出了一个重要的问题：SBT 到底应该绑到啥上面，绑地址当然最方便和直接，但是也会面临私钥丢失、换地址等问题。一些解决办法是绑定到 DID 或者使用社交恢复等方法，这里不展开，后面另开文章讨论。回到 EIP-5114 ，此标准创建于 2022-05-30 目前依然是 Draft 阶段，总价如下：</description>
    </item>
    
    <item>
      <title>上海 or 大理？哪里更适合 BUIDL</title>
      <link>https://tingfei.space/posts/daliorshanghai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tingfei.space/posts/daliorshanghai/</guid>
      <description>作为一个云南人，这次大理的瓦猫之夏 Web3 大会让我很兴奋，就像我在群里说的那样 “当初俺从云南出来到上海搞 Web3 ，搞半天 Web3 中心要搬到云南了？”。虽然由于疫情，大会最终被迫“去中心化”了，但大理赋予了这次大会独一无二的氛围，简单来说就是，参加这次大会更像是来找朋友聊天而不只是商业 Social。
这次大会，我想从上海来的朋友应该很多，一是上海的从业者本身很多，另一方面上海封的那俩月给很多人都憋疯了（包括我），又加上上海今年夏天离谱的高温，所以导致“上海的朋友在大理相聚了”。
李阳老师问这几天在大理让我印象最深刻或者最意外的是什么？ 参加活动和朋友聊天德扑固然很开心，但并不意外，我的回答是 ”租了电动车在村庄里的小路乱逛，穿过一条狭窄的小巷时，开阔的洱海、远处和山和云一下子突然呈现在我的面前。和朋友坐在岸边吹着风，拿出古城里买的本地小吃，看着对面的景色，这时候我才真正感受到大理的美。“ 这里集齐了几个因素：
 风景好：真的绝美，是我最喜欢的湖景 不挤：洱海一圈 120 公里，人再多也总有不挤的地方 气温舒适：坐在阴影下就一点都不会热，天然大空调 距离生活区域不远：骑电动车从古城到洱海边 20 分钟左右 美食：这个看个人口味，不过作为云南人这里很符合我的饮食习惯，强烈推荐绿玉路 111 号的小杨鸡脚，下午三点开摊，7 点左右就会卖完  除此之外大理也是全国为数不多的数字游民聚集地，Dalihub、706大理、Seeshore 等等一个个的 聚集点，让人觉得大理正在慢慢形成一个新的很特别的中心。
这些真的很吸引人，让我有从上海搬到这里的冲动，然后和有类似想法的朋友交流后得到了一些观点：
 上海无疑聚集了最多最优秀的 Web3 创业者、研究员、投资机构，这些资源对于 BUIDL 其实挺重要的，再加上一个杭州基本上已经是国内 Web3 半边天了，这是大理远不能相比的。 大理虽然很舒服，但正因为舒服聚集了很多”摆烂“的人，对于想要专注做事的人来说，可能会受到这种情绪的影响， 导致变得太佛系做不成事。 Web3 主战场已经不在国内了，最终都要出去才有得玩，但是在出去之前大理确实是一个好地方。  我拿不定主意，于是决定在大理工作一个月，看看自己的状态变化和做事的实际效率，一个月之后在决定要不要从上海搬到大理。这一个月我会去感受和记录大理的整体从业氛围，可能一个月之后用实际行动告诉大家，上海和大理到底哪里更适合 BUIDL 。</description>
    </item>
    
  </channel>
</rss>
